pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mstar228/edulink-backend'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/museongkim0/jenkins_test.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }
        stage('Gradle Build') {
            steps {
                echo "Add Permission"
                sh 'chmod +x /var/lib/jenkins/workspace/edulink-backend/backend/gradlew'

                echo "Delete build"
                sh 'rm -rf /var/lib/jenkins/workspace/edulink-backend/backend/build'

                echo "Move to backend and Build"
                sh 'cd /var/lib/jenkins/workspace/edulink-backend/backend && ./gradlew bootJar'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "/var/lib/jenkins/workspace/edulink-backend/backend")
                }
            }
        }
        stage('Push to Registry') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('SSH') {
            when {
                expression { env.GIT_BRANCH == 'origin/kms/main' }
            }
            steps {
                script {
                    def deployColor = (env.BUILD_NUMBER.toInteger() % 2 == 0) ? 'green' : 'blue'
                    def otherColor = (deployColor == 'green') ? 'blue' : 'green'

                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: 'k8s',
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: 'backend/k8s/backend-cm.yml',
                                        remoteDirectory: '/',
                                        execCommand: '''
                                            sed -i "s/latest/$BUILD_ID/g" backend/k8s/backend-cm.yml
                                        '''
                                    ),
                                    sshTransfer(
                                        sourceFiles: 'backend/k8s/backend-svc.yml',
                                        remoteDirectory: '/',
                                        execCommand: '''
                                            sed -i "s/latest/$BUILD_ID/g" backend/k8s/backend-svc.yml
                                        '''
                                    ),
                                    sshTransfer(
                                        sourceFiles: "backend/k8s/backend-deployment-${deployColor}.yml",
                                        remoteDirectory: '/',
                                        execCommand: '''
                                            sed -i "s/latest/1.0.$BUILD_ID/g" backend/k8s/backend-deployment-${deployColor}.yml
                                        '''
                                    ),
                                    sshTransfer(
                                        execCommand: '''
                                            kubectl apply -f /home/test/backend/k8s/backend-cm.yml
                                        '''
                                    ),
                                    sshTransfer(
                                        execCommand: '''
                                            kubectl apply -f /home/test/backend/k8s/backend-svc.yml
                                        '''
                                    ),
                                    sshTransfer(
                                        execCommand: """
                                            kubectl apply -f /home/test/backend/k8s/backend-deployment-${deployColor}.yml
                                        """
                                    ),
                                    sshTransfer(
                                        execCommand: """
                                            kubectl scale deployment backend-deployment-${otherColor} --replicas=0 -n
                                        """
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }
}