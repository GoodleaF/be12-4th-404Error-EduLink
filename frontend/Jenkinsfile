pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mstar228/edulink-frontend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        KUBE_HOST = 'test@192.0.2.7'
        PATH = "/usr/local/bin:${env.PATH}"
    }

    stages {
        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/GoodleaF/be12-4th-404Error-EduLink.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }
        stage('Build Frontend') {
            steps {
                echo "Building Frontend"
                sh '''
                    cd ${WORKSPACE}/frontend
                    npm install
                    npm run build
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/frontend")
                }
            }
        }
        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('Determine Deploy Color') {
            steps {
                script {
                    // 현재 서비스의 deployment 레이블 확인
                    def svcSelector = sh(
                        script: "ssh ${KUBE_HOST} 'kubectl get svc frontend-svc -o jsonpath=\"{.spec.selector.deployment}\"' || echo ''",
                        returnStdout: true
                    ).trim()
                    if (!svcSelector) {
                        echo "Service 'frontend-svc' not found or no deployment selector. Checking existing deployments."

                        // 현재 존재하는 deployment 확인
                        def blueDeployment = sh(
                            script: "ssh ${KUBE_HOST} 'kubectl get deployment frontend-deployment-blue -o name 2>/dev/null || echo ''",
                            returnStdout: true
                        ).trim()

                        def greenDeployment = sh(
                            script: "ssh ${KUBE_HOST} 'kubectl get deployment frontend-deployment-green -o name 2>/dev/null || echo ''",
                            returnStdout: true
                        ).trim()

                        // 기존 deployment 상태에 따라 배포 색상 결정
                        if (!blueDeployment && greenDeployment) {
                            svcSelector = 'green'
                        } else if (blueDeployment && !greenDeployment) {
                            svcSelector = 'blue'
                        } else {
                            // 둘 다 없거나 둘 다 있는 경우 green으로 시작
                            svcSelector = 'green'
                        }
                    }

                    echo "Current deployment color: ${svcSelector}"
                    // 현재 서비스가 green이면 배포할 색상은 blue, 그렇지 않으면 green으로 결정
                    def deployColor = (svcSelector == 'green') ? 'blue' : 'green'
                    def otherColor = (deployColor == 'green') ? 'blue' : 'green'
                    echo "Deploying ${deployColor} version (scaling down ${otherColor})"
                    env.DEPLOY_COLOR = deployColor
                    env.OTHER_COLOR = otherColor
                }
            }
        }
        stage('Deploy Blue-Green') {
            steps {
                script {
                    // 로컬의 배포 YAML 파일 내 'latest' 태그를 현재 IMAGE_TAG로 치환
                    sh """
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/frontend/k8s/frontend-deployment-${env.DEPLOY_COLOR}.yml
                    """
                    // 디버깅: 로컬 k8s 디렉터리 파일 목록 출력
                    sh "ls -la ${WORKSPACE}/frontend/k8s"

                    // 수정한 YAML 파일을 원격 호스트로 전송
                    sh """
                        scp ${WORKSPACE}/frontend/k8s/frontend-deployment-${env.DEPLOY_COLOR}.yml ${KUBE_HOST}:/home/test/frontend/k8s/
                    """

                    // 원격 호스트에서 ConfigMap, Service, 그리고 선택된 Deployment 적용
                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/frontend/k8s/frontend-conf.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/frontend/k8s/frontend-svc.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/frontend/k8s/frontend-deployment-${env.DEPLOY_COLOR}.yml'
                    """

                    // 선택된 Deployment의 롤아웃 상태 대기
                    sh "ssh ${KUBE_HOST} 'kubectl rollout status deployment/frontend-deployment-${env.DEPLOY_COLOR}'"

                    // 반대 색상의 Deployment 스케일 다운 (오류 발생 시 무시)
                    sh "ssh ${KUBE_HOST} 'kubectl scale deployment frontend-deployment-${env.OTHER_COLOR} --replicas=0' || true"
                }
            }
        }
    }
}