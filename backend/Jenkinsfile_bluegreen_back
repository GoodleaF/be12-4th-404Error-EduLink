pipeline {
    agent any

    environment {
        // 도커 이미지 이름 및 태그 (예: 1.0.<BUILD_NUMBER>)
        IMAGE_NAME = 'goodleaf96/edulink404backend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        KUBE_HOST = 'test@192.0.2.7'
    }

    stages {
        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/GoodleaF/be12-4th-404Error-EduLink.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }
        stage('Gradle Build') {
            steps {
                echo "Building Project"
                sh '''
                    echo "Add Permission"
                    chmod +x ${WORKSPACE}/backend/gradlew
                    echo "Cleaning previous build"
                    rm -rf ${WORKSPACE}/backend/build
                    echo "Running Gradle build"
                    cd ${WORKSPACE}/backend && ./gradlew bootJar
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/backend")
                }
            }
        }
        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB_INFO_KJY']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('Deploy Blue-Green') {
            steps {
                script {
                    // BUILD_NUMBER가 짝수이면 green, 홀수이면 blue로 배포
                    def deployColor = (env.BUILD_NUMBER.toInteger() % 2 == 0) ? 'green' : 'blue'
                    echo "Deploying ${deployColor} version"


                    sh """
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml
                    """

                    // SSH를 통해 원격 Kubernetes 마스터에서 ConfigMap, Service, 그리고 선택한 Deployment를 적용
                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-cm.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-svc.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-deployment-${deployColor}.yml'
                    """

                    // 선택한 Deployment의 롤아웃 상태를 대기
                    sh "ssh ${KUBE_HOST} 'kubectl rollout status deployment/backend-deployment-${deployColor} -n goodleaf'"

                    // 반대 버전은 스케일 다운 처리
                    def otherColor = (deployColor == 'green') ? 'blue' : 'green'
                    sh "ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${otherColor} --replicas=0 -n goodleaf'"
                }
            }
        }
    }
}
