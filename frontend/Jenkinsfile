pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mstar228/edulink-frontend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        KUBE_HOST = 'test@192.0.2.7'
        PATH = "/usr/local/bin:${env.PATH}"
    }

    stages {
        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/GoodleaF/be12-4th-404Error-EduLink.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }
        stage('Build Frontend') {
            steps {
                echo "Building Frontend"
                sh '''
                    cd ${WORKSPACE}/frontend
                    npm install
                    npm run build
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/frontend")
                }
            }
        }
        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('Determine Deploy Color') {
            steps {
                script {
                    // 현재 활성화된 디플로이먼트를 조회 (레플리카 수 > 0인 디플로이먼트)
                    def currentDeployment = sh(
                        script: "ssh ${KUBE_HOST} 'kubectl get deployment -l app=frontend -o jsonpath=\"{.items[?(@.spec.replicas>0)].metadata.name}\"' || echo ''",
                        returnStdout: true
                    ).trim()
                    echo "Current active deployment: ${currentDeployment}"

                    def deployColor = ''
                    def otherColor = ''
                    if (currentDeployment.contains("blue")) {
                        deployColor = "green"
                        otherColor = "blue"
                    } else if (currentDeployment.contains("green")) {
                        deployColor = "blue"
                        otherColor = "green"
                    } else {
                        echo "No active deployment found. Defaulting to blue as new deployment."
                        deployColor = "blue"
                        otherColor = "green"
                    }

                    echo "Deploying ${deployColor} version (scaling down ${otherColor})"
                    env.DEPLOY_COLOR = deployColor
                    env.OTHER_COLOR = otherColor
                }
            }
        }
        stage('Deploy Blue-Green') {
            steps {
                script {
                    // 로컬 deployment YAML 파일 내 'latest' 태그를 현재 이미지 태그로 변경
                    sh """
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/frontend/k8s/frontend-deployment-${env.DEPLOY_COLOR}.yml
                    """
                    // 로컬 파일 확인 (디버깅용)
                    sh "ls -la ${WORKSPACE}/frontend/k8s"
                    // 수정된 YAML 파일을 원격 호스트로 전송
                    sh """
                        scp ${WORKSPACE}/frontend/k8s/frontend-deployment-${env.DEPLOY_COLOR}.yml ${KUBE_HOST}:/home/test/frontend/k8s/
                    """
                    // 원격 호스트에서 config, service, 그리고 선택된 deployment 적용
                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/frontend/k8s/frontend-conf.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/frontend/k8s/frontend-svc.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/frontend/k8s/frontend-deployment-${env.DEPLOY_COLOR}.yml'
                    """
                    // 배포된 Deployment의 롤아웃 상태 대기
                    sh "ssh ${KUBE_HOST} 'kubectl rollout status deployment/frontend-deployment-${env.DEPLOY_COLOR}'"
                    // 반대 색상의 Deployment 스케일 다운 (오류 발생 시 무시)
                    sh "ssh ${KUBE_HOST} 'kubectl scale deployment frontend-deployment-${env.OTHER_COLOR} --replicas=0' || true"
                }
            }
        }
        // 추가 검증 단계: 배포 후 헬스체크 또는 smoke test
        stage('Verify Deployment') {
            steps {
                script {
                    echo "Verifying deployment health..."
                    // 예시: 아래와 같이 헬스체크 엔드포인트 호출
                    // sh "curl -f http://your-frontend-url/health"
                }
            }
        }
    }
}
